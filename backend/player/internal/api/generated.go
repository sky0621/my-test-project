// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest struct {
	// Message エラーメッセージ
	Message ErrorMessage `json:"message"`
}

// N404NotFound defines model for 404-NotFound.
type N404NotFound struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// N500InternalServerError defines model for 500-InternalServerError.
type N500InternalServerError struct {
	// InquiryID 問い合わせ用ID
	InquiryID InquiryID `json:"inquiryId"`

	// Message エラーメッセージ
	Message ErrorMessage `json:"message"`
}

// ContentID コンテンツを一意に識別するID（フォーマットはUUID v7）
type ContentID = string

// ContentName コンテンツ名
type ContentName = string

// ContentRequest defines model for ContentRequest.
type ContentRequest struct {
	// Name コンテンツ名
	Name     ContentName      `json:"name"`
	Programs []ProgramRequest `json:"programs"`
}

// ContentResponse defines model for ContentResponse.
type ContentResponse struct {
	// ContentID コンテンツを一意に識別するID（フォーマットはUUID v7）
	ContentID ContentID `json:"id"`

	// Name コンテンツ名
	Name     ContentName       `json:"name"`
	Programs []ProgramResponse `json:"programs"`
}

// InquiryID 問い合わせ用ID
type InquiryID = string

// ErrorMessage エラーメッセージ
type ErrorMessage = string

// ProgramAnswer 解答
type ProgramAnswer = string

// ProgramID 問題を一意に識別するID（フォーマットはUUID v7）
type ProgramID = string

// ProgramQuestion 問題
type ProgramQuestion = string

// ProgramRequest defines model for ProgramRequest.
type ProgramRequest struct {
	// Answer 解答
	Answer ProgramAnswer `json:"answer"`

	// Question 問題
	Question ProgramQuestion `json:"question"`
}

// ProgramResponse defines model for ProgramResponse.
type ProgramResponse struct {
	// Answer 解答
	Answer *ProgramAnswer `json:"answer,omitempty"`

	// ProgramID 問題を一意に識別するID（フォーマットはUUID v7）
	ProgramID ProgramID `json:"id"`

	// Question 問題
	Question *ProgramQuestion `json:"question,omitempty"`
}

// ID コンテンツを一意に識別するID（フォーマットはUUID v7）
type ID = ContentID

// PostContentsJSONRequestBody defines body for PostContents for application/json ContentType.
type PostContentsJSONRequestBody = ContentRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コンテンツ一覧取得
	// (GET /contents)
	GetContents(ctx echo.Context) error
	// コンテンツ新規登録
	// (POST /contents)
	PostContents(ctx echo.Context) error
	// 指定コンテンツ取得
	// (GET /contents/{id})
	GetContentsByID(ctx echo.Context, id ID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContents converts echo context to params.
func (w *ServerInterfaceWrapper) GetContents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContents(ctx)
	return err
}

// PostContents converts echo context to params.
func (w *ServerInterfaceWrapper) PostContents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostContents(ctx)
	return err
}

// GetContentsByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetContentsByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContentsByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/contents", wrapper.GetContents)
	router.POST(baseURL+"/contents", wrapper.PostContents)
	router.GET(baseURL+"/contents/:id", wrapper.GetContentsByID)

}

type GetContentsRequestObject struct {
}

type GetContentsResponseObject interface {
	VisitGetContentsResponse(w http.ResponseWriter) error
}

type GetContents200JSONResponse []ContentResponse

func (response GetContents200JSONResponse) VisitGetContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContents500JSONResponse N500InternalServerError

func (response GetContents500JSONResponse) VisitGetContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostContentsRequestObject struct {
	Body *PostContentsJSONRequestBody
}

type PostContentsResponseObject interface {
	VisitPostContentsResponse(w http.ResponseWriter) error
}

type PostContents201JSONResponse ContentResponse

func (response PostContents201JSONResponse) VisitPostContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostContents400JSONResponse N400BadRequest

func (response PostContents400JSONResponse) VisitPostContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostContents500JSONResponse N500InternalServerError

func (response PostContents500JSONResponse) VisitPostContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsByIDRequestObject struct {
	ID ID `json:"id"`
}

type GetContentsByIDResponseObject interface {
	VisitGetContentsByIDResponse(w http.ResponseWriter) error
}

type GetContentsByID200JSONResponse ContentResponse

func (response GetContentsByID200JSONResponse) VisitGetContentsByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsByID400JSONResponse N400BadRequest

func (response GetContentsByID400JSONResponse) VisitGetContentsByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsByID404JSONResponse N404NotFound

func (response GetContentsByID404JSONResponse) VisitGetContentsByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsByID500JSONResponse N500InternalServerError

func (response GetContentsByID500JSONResponse) VisitGetContentsByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// コンテンツ一覧取得
	// (GET /contents)
	GetContents(ctx context.Context, request GetContentsRequestObject) (GetContentsResponseObject, error)
	// コンテンツ新規登録
	// (POST /contents)
	PostContents(ctx context.Context, request PostContentsRequestObject) (PostContentsResponseObject, error)
	// 指定コンテンツ取得
	// (GET /contents/{id})
	GetContentsByID(ctx context.Context, request GetContentsByIDRequestObject) (GetContentsByIDResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetContents operation middleware
func (sh *strictHandler) GetContents(ctx echo.Context) error {
	var request GetContentsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContents(ctx.Request().Context(), request.(GetContentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetContentsResponseObject); ok {
		return validResponse.VisitGetContentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostContents operation middleware
func (sh *strictHandler) PostContents(ctx echo.Context) error {
	var request PostContentsRequestObject

	var body PostContentsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostContents(ctx.Request().Context(), request.(PostContentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostContents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostContentsResponseObject); ok {
		return validResponse.VisitPostContentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetContentsByID operation middleware
func (sh *strictHandler) GetContentsByID(ctx echo.Context, id ID) error {
	var request GetContentsByIDRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContentsByID(ctx.Request().Context(), request.(GetContentsByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContentsByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetContentsByIDResponseObject); ok {
		return validResponse.VisitGetContentsByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXX0/bVhT/KtHdHp3YSdOS5g0Im6KtjLbiqeLhYl8SV4ltrm+ACFnCNlrTLQiG+NNu",
	"0zY0rWVMtNPaSVRF64e5NdCnfoXpXjvOHzskVaNpvEDse+85v3PO7/x87iqQ9aqha0gjJsivAgNiWEUE",
	"Yf40qWsEaaRYuF1DuM7eKMiUsWoQVddAHlDnBXVfUPdr/ne9WDjbe+Ad73uNfSAAle0wICkDAWiwikAe",
	"qAoQAEaLNRUjBeQJriEBmHIZVSEz/ilGCyAPPhHbmER/1RRbUBRgCWAlWdKTgc1iAVhWywpHnZWk5ARU",
	"7qDFGjIJjwrrBsJERXy9ikwTltAgj1MY6/hWsJe5aAO/F9qYEwCpGwyHPn8fyYShy0rZ5LROPtNrmjI6",
	"7xE31yUpWdQIwhqs3EV4CWF+JupR1RjuelEZymcx3G0JI0lV271wadraFR7EM+psvz1ZO1vfpPYfF8eP",
	"vMZv1H5MnW+LhfenDeruUud36p5S9yfqutRtUPv57GyxkFgae3/6EAgArcCqUWHOpfTNG9lcLpOU09lM",
	"ciydySXnpRxKSgsQofkcun4zNw9CqCbBqlYC3fQLW6QjhGm+NCAIb2ujC0tvjPYzb2vDe7gR8d/205fh",
	"WgBgiIbiWC2BGShhWPUJQ5D/47LzM/6BFoY2QyHGsB5hAYfU4eYSBtxBpqFrJophsvJBMvGfpiHAPCgP",
	"XAKHSUZPM0bo5O1uUnvd22pQZ5PaP5zvHBYLXYRKZ65lr98Yyw0gcMtFIXR6q930vQw+pK7fWgestZzX",
	"7Ldz0uV2VkMrBpIJUhKIWUvoslzDLPoYIgfZG9fMZYSjDi+e/np+vNNlPnzVz1afXL07aP6fZKMFttCB",
	"/DZrJA44Hn8XhvBVvzz0FQcYJnsIXgeVsQSw2IFuiINhML0NENoRWkji2N/bVqOKYrCCtGk0wqBVJSZK",
	"tknVFvRovWcqsI5wYnymCARQUWUUpCAgz7gB5TJKZFISEEANV0AelAkxzLwoLi8vpyBfTum4JAZnTfHL",
	"4uTU9N2pZCYlpcqkWuE6pRJOpS5vSwibPoh0SkpJbJ9uIA0aKsiDaykpdY0JFyRlXgVR9uWTP5QQZxur",
	"EmSBsE4EnyMy2drDcuLXk+/PSBL7F5jgRTWMiirzw+J90097ezwcSo97vyFRPbaEnmx/9UU+0fP1fXuy",
	"dvHkKXW2L97seBsvfZ2ga04wd30Q7MvQ9pvhYlBS52+uTltccwMh9kffWrUK2XgOYqPwNve8f/b5x003",
	"Yyo0o5vdJeKkn9CV+sjC7JlXYqPrQn629+fFk83zx6/fNf+i7hF1nrOQnVfUbURuEFaEVunRA2+xKYp8",
	"EiNIkBKhEHW2u6Kw96n9s/fLS2+r4V8SRseingtPDMgJqCSC5XzifP3A++YVtY+o+x2n0QGn1BtqN8+a",
	"D7xn31N7lzrNLrhXh/SdSec7Q40SV1XFGkaoJup8lOq8C9+LD6m9Rey5K1tzH6l2H0lLJmpBNSO8jBG1",
	"K0bHrJQdIdyO63oM2GmdJPhiv4TaTe/4kffjIW/xIzaUX4W2iY2l9a3gW7kPn/v9xpPEUjocQURoqOJS",
	"Glhz1r8BAAD//+DKQshWEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
